//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Emil's Resources/Script/MovementScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementScheme : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementScheme"",
    ""maps"": [
        {
            ""name"": ""LeftHandCustom"",
            ""id"": ""02b4786a-13c8-43a9-885f-e79764b5b776"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""5d089f15-f555-4475-a515-1a15df953cb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""847a3390-83aa-4873-9787-be547db59f03"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b18274d-09a2-4e3a-977b-b78b15fa1e1b"",
                    ""path"": ""<PXR_Controller>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ffed902-fe63-472f-ac87-30cbc40b3eef"",
                    ""path"": ""<PXR_Controller>{LeftHand}/thumbstickTouched"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftHandCustom
        m_LeftHandCustom = asset.FindActionMap("LeftHandCustom", throwIfNotFound: true);
        m_LeftHandCustom_Grab = m_LeftHandCustom.FindAction("Grab", throwIfNotFound: true);
        m_LeftHandCustom_Move = m_LeftHandCustom.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHandCustom
    private readonly InputActionMap m_LeftHandCustom;
    private ILeftHandCustomActions m_LeftHandCustomActionsCallbackInterface;
    private readonly InputAction m_LeftHandCustom_Grab;
    private readonly InputAction m_LeftHandCustom_Move;
    public struct LeftHandCustomActions
    {
        private @MovementScheme m_Wrapper;
        public LeftHandCustomActions(@MovementScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_LeftHandCustom_Grab;
        public InputAction @Move => m_Wrapper.m_LeftHandCustom_Move;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandCustom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandCustomActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandCustomActions instance)
        {
            if (m_Wrapper.m_LeftHandCustomActionsCallbackInterface != null)
            {
                @Grab.started -= m_Wrapper.m_LeftHandCustomActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_LeftHandCustomActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_LeftHandCustomActionsCallbackInterface.OnGrab;
                @Move.started -= m_Wrapper.m_LeftHandCustomActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LeftHandCustomActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LeftHandCustomActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_LeftHandCustomActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public LeftHandCustomActions @LeftHandCustom => new LeftHandCustomActions(this);
    public interface ILeftHandCustomActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
