//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Emil's Resources/Script/MovementScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementScheme : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementScheme"",
    ""maps"": [
        {
            ""name"": ""VRLeftHand"",
            ""id"": ""9af5d0a1-8a16-4a3c-abc2-dcdfc5f7882d"",
            ""actions"": [
                {
                    ""name"": ""Move Joystick"",
                    ""type"": ""Button"",
                    ""id"": ""4f1ce87f-21e7-4f59-82be-4ed1bfaabfc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd5e2e02-c572-4afe-a589-e3c96ad0bab6"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d90e4740-963d-4e46-929e-6a02b9bdf2db"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1aba2a38-492e-404f-bf25-16b9579a6d71"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""941cf893-2d41-490a-80ec-c1fd855d95d8"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VRRightHand"",
            ""id"": ""afaf48c8-4e52-4b20-a85c-5b0b47ae2386"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""f3ecfb11-4d3c-4496-a41c-f6345cce08f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51a56cf5-180f-4fe5-a79d-8453f34cf0e0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VRLeftHand
        m_VRLeftHand = asset.FindActionMap("VRLeftHand", throwIfNotFound: true);
        m_VRLeftHand_MoveJoystick = m_VRLeftHand.FindAction("Move Joystick", throwIfNotFound: true);
        // VRRightHand
        m_VRRightHand = asset.FindActionMap("VRRightHand", throwIfNotFound: true);
        m_VRRightHand_Newaction = m_VRRightHand.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VRLeftHand
    private readonly InputActionMap m_VRLeftHand;
    private IVRLeftHandActions m_VRLeftHandActionsCallbackInterface;
    private readonly InputAction m_VRLeftHand_MoveJoystick;
    public struct VRLeftHandActions
    {
        private @MovementScheme m_Wrapper;
        public VRLeftHandActions(@MovementScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveJoystick => m_Wrapper.m_VRLeftHand_MoveJoystick;
        public InputActionMap Get() { return m_Wrapper.m_VRLeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRLeftHandActions set) { return set.Get(); }
        public void SetCallbacks(IVRLeftHandActions instance)
        {
            if (m_Wrapper.m_VRLeftHandActionsCallbackInterface != null)
            {
                @MoveJoystick.started -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnMoveJoystick;
                @MoveJoystick.performed -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnMoveJoystick;
                @MoveJoystick.canceled -= m_Wrapper.m_VRLeftHandActionsCallbackInterface.OnMoveJoystick;
            }
            m_Wrapper.m_VRLeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveJoystick.started += instance.OnMoveJoystick;
                @MoveJoystick.performed += instance.OnMoveJoystick;
                @MoveJoystick.canceled += instance.OnMoveJoystick;
            }
        }
    }
    public VRLeftHandActions @VRLeftHand => new VRLeftHandActions(this);

    // VRRightHand
    private readonly InputActionMap m_VRRightHand;
    private IVRRightHandActions m_VRRightHandActionsCallbackInterface;
    private readonly InputAction m_VRRightHand_Newaction;
    public struct VRRightHandActions
    {
        private @MovementScheme m_Wrapper;
        public VRRightHandActions(@MovementScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_VRRightHand_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_VRRightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRRightHandActions set) { return set.Get(); }
        public void SetCallbacks(IVRRightHandActions instance)
        {
            if (m_Wrapper.m_VRRightHandActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_VRRightHandActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_VRRightHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public VRRightHandActions @VRRightHand => new VRRightHandActions(this);
    public interface IVRLeftHandActions
    {
        void OnMoveJoystick(InputAction.CallbackContext context);
    }
    public interface IVRRightHandActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
